generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String?
  password           String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  phoneno            String?             @unique
  role               String?             @default("user")
  address            String?
  brand              Brand?              @relation(fields: [brandId], references: [id])
  brandId            Int?                @unique
  orders             Order[]
  feedbacks          Feedback[]
  ratings            Rating[]
  wishlists          Wishlist[]
  productOnWishlists ProductOnWishlist[]
  accounts           Account[]
  sessions           Session[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id                 Int                 @id @default(autoincrement())
  stock              Int                 @default(0)
  price              Int
  name               String
  imgurl             String              @default("https://www.foodandwine.com/thmb/Wd4lBRZz3X_8qBr69UOu2m7I2iw=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc=/classic-cheese-pizza-FT-RECIPE0422-31a2c938fc2546c9a07b7011658cfd05.jpg")
  salePrice          Int
  isFeatured         Boolean             @default(false)
  brandId            Int
  nonVeg             Boolean
  description        String?
  takeaway           Boolean             @default(true)
  category           Category
  productType        ProductType?
  brand              Brand               @relation(fields: [brandId], references: [id])
  ratings            Rating[]
  wishlists          Wishlist[]
  productOnWishlists ProductOnWishlist[]
  orderProducts      OrderProduct[]
}

model ProductOnWishlist {
  id        Int     @id @default(autoincrement())
  userId    String
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [orderId])
}

enum Category {
  BIRYANI
  CURRY
  BREADS
  CHINESE
}

enum ProductType {
  SINGLE
  VARIABLE
}

model Brand {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  isOpen        Boolean    @default(false)
  imgurl        String?
  isFeatured    Boolean    @default(false)
  address       String?    @default("")
  parcelCharge  Int        @default(5)
  parcelPerItem Boolean    @default(false)
  products      Product[]
  orders        Order[]
  feedbacks     Feedback[]
  User          User?
}

enum orderType {
  DineIn
  TakeAway
}

model Order {
  orderId       Int            @id @default(autoincrement())
  orderStatus   String         @default("Cooking")
  totalAmount   Int
  orderedAt     DateTime       @default(now())
  address       String
  feedbackId    Int?           @unique
  type          orderType      @default(DineIn)
  feedback      Feedback[]
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  brandId       Int
  brand         Brand          @relation(fields: [brandId], references: [id])
  orderProducts OrderProduct[]
}

model Feedback {
  id      Int    @id @default(autoincrement())
  review  String
  userId  String
  rating  Int
  orderId Int
  brandId Int?
  order   Order  @relation(fields: [orderId], references: [orderId])
  user    User   @relation(fields: [userId], references: [id])
  Brand   Brand? @relation(fields: [brandId], references: [id])
}

model Banner {
  id           Int     @id @default(autoincrement())
  imgurl       String?
  targetScreen String
  active       Boolean
}

model Wishlist {
  id        Int       @id @default(autoincrement())
  userId    String
  productId Int
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
}

model Rating {
  id        Int     @id @default(autoincrement())
  userId    String
  rating    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
